/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/rgb.h>

// Uncomment this block if using RGB
&led_strip {
    // chain-length = <6>; // Uncomment if only using underglow
    chain-length = <35>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <29>; // Uncomment if using only per-key LEDs.
};

// TODO: https://zmk.dev/docs/keymaps/behaviors/power need EP_OFF AND EP_ON (EP_TOG) to save power
/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {

// this is the main layer with a pretty basic layout
// THUMBS are supposed to use exactly two keys each. homing are the layer keys and next to them is lctl and spc
// backspace and enter are on layer two, where enter replaces space on the thumb, and backspace is under the pinky
// however, i do need command (LGUI) a lot for macos, so its close by
// THE THUMB ENTER AND BACKSPACE ARE ONLY PROVIDED FOR WHEN THEY ARE NEEDED OUTSIDE OF TEN FINGER TYPING
// LIKE WHEN ONLY ONE HAND IS FREE
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
// |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//               |CTRL | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   | RALT |
            bindings = <
&kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5                     &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp MINUS
&kp TAB &kp Q &kp W &kp E &kp R &kp T                      &kp Y &kp U &kp I &kp O &kp P &kp LBRC
&kp ESC &kp A &kp S &kp D &kp F &kp G                      &kp H &kp J &kp K &kp L &kp SEMI &kp SQT
&kp LSHFT &kp Z &kp X &kp C &kp V &kp B &kp C_MUTE     &trans &kp N &kp M &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                 &kp LALT &kp RET &kp LCTRL &mo 2 &kp LGUI     &kp LALT &kp SPC &mo 1 &kp BSPC &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {

// SPECIAL CHARACTERS
// on this layer you get the function keys in the top row
// second row is the numbers, as normally, just shifted down one row, with + replacing grave (^)
// third row is the number row with shift modified, with * added to the left (its a shift modified +)
// fourth row is a couple of special keys like so
// <, >, ´, `, backslash, [,        ], |, {, }, ', #
// the fifth row provides one with either another layer or the option key, which is only needed for exotic symbols, as all the others are easily accessible
// the grave key for the symbols ^ and ° is so rarely used, that its replaced on this layer, and only accessible through the first layer
// ------------------------------------------------------------------------------------------------------------
// |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
// |       |     |     |      |      |      |                   |      |       |       |      |       |       |
// |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
// |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6                       &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12
&kp RBRC &kp N1 &kp N2 &kp N3 &kp N4 &kp N5                    &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp MINUS
&kp LS(RBRC) &kp LS(N1) &kp LS(N2) &kp LS(N3) &kp LS(N4) &kp LS(N5)                    &kp LS(N6) &kp LS(N7) &kp LS(N8) &kp LS(N9) &kp LS(N0) &kp LS(MINUS)
&kp NUBS &kp LS(NUBS) &kp EQUAL &kp LS(EQUAL) &kp LS(LA(N7)) &kp LA(N5) &kp KP_MULTIPLY       &trans &kp LA(N6) &kp LA(N7) &kp LA(N8) &kp LA(N9) &kp LS(NUHS) &kp NUHS
                            &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
// NAVIGATION
// this layer is for NAVIGATION
// you could press any modifier combination and the arrow keys here for example. added hjkl for convenience
// as the left hand can easily any kind of modifier combination, they are not needed on the right
// most of this is unmodified
// ------------------------------------------------------------------------------------------------------------
// | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
// |       |     |     |      |      |      |                   |      |       |       |      |       |       |
// |       |     |     |      |      |      |                   |  <-  |   v   |  ^    |  ->  | bspce |  del  |
// |       |     |     |      |      |      |        |  |       |      |       |       |      |       |       |
//               |     |      |      |      |        |  |       | RET  |       |       |      |
            bindings = <
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                 &trans &trans &trans &trans &trans &trans
&trans &ext_power EP_ON &ext_power EP_OFF &ext_power EP_TOG &trans &trans                       &trans &trans &trans &trans &trans &trans
&bl BL_CYCLE &bl BL_TOG &rgb_ug RGB_EFR &rgb_ug RGB_EFF	&rgb_ug RGB_BRD &rgb_ug RGB_BRI	                       &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp BSPC &kp DEL
&rgb_ug RGB_SAD &rgb_ug RGB_SAI &rgb_ug RGB_HUD &rgb_ug RGB_HUI &rgb_ug RGB_OFF &rgb_ug RGB_ON &trans   &trans    &trans &trans &trans &trans &trans  &trans
                 &trans &trans &trans &trans &trans     &trans &kp RET &trans &trans &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
        adjust_layer {
// reference: https://zmk.dev/docs/keymaps/conditional-layers
// ------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      | slep |                   |      |       |       |      |       |       |
// |       |     |     |      |      |      |                   |      |       |       |      |       |       |
// |       |     |     | vol- | mute | vol+ |                   |      |       |       |      |       |       |
// |       |     |     | prev | paus | next |        |  |       |      |       |       |      |       |       |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&trans &trans &trans &trans &trans &kp C_SLEEP                  &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                       &trans &trans &trans &trans &trans &trans
&trans &trans &trans &kp C_VOL_DN &kp C_MUTE &kp C_VOL_UP       &trans &trans &trans &trans &trans &trans
&trans &trans &trans &kp C_PREV &kp C_PP &kp C_NEXT             &trans &trans &trans &trans &trans  &trans
                 &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
